#!/bin/bash
clear                    	        
function create_user() {
echo -e "[Fill-up the field]"
read -p "Username : " Login
read -p "Password : " Pass
read -p "Expired (Days): " Date

IP=`dig +short myip.opendns.com @resolver1.opendns.com`
useradd -e `date -d "$Date days" +"%Y-%m-%d"` -s /bin/false -M $Login
exp="$(chage -l $Login | grep "Account expires" | awk -F": " '{print $2}')"
echo -e "$Pass\n$Pass\n"|passwd $Login &> /dev/null
echo -e ""
echo -e "======Account Information======"
echo -e "Username: $Login "
echo -e "Password: $Pass"
echo -e "-------------------------------"
echo -e "Expired Date: $exp"
echo -e "==============================="
echo -e "Mod by jhelson15"
echo -e "Type (menu) to back menu option."
echo -e ""
	}
function create_ss() {

	nano /etc/shadowsocks.json
	echo -e "Successfully edit your Shadowsocks Clients Account"
	echo -e "Type [menu] to back menu option."
	}
function restart_ss() {

	 /etc/init.d/shadowsocks restart
	echo -e "Successfully Restart your Shadowsocks Clients Account"
	echo -e "Type [menu] to back menu option."
	}
function change_user_pass() {
	
read -p "Enter Username Who Changed Password: " username
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
read -p "Enter a new Password for the user $username: " password

clear
echo "Connecting to..."
sleep 0.5
echo "Change Password..."
sleep 0.5
  egrep "^$username" /etc/passwd >/dev/null
  echo -e "$password\n$password" | passwd $username
  clear
  echo " "
  echo "---------------------------------------"
  echo -e "Password for user ${blue}$username${NC} It has been successfully replaced."
  echo -e "Password for new user ${blue}$username${NC} is ${red}$password${NC}"
  echo "--------------------------------------"
  echo " "

else
echo -e "Username ${red}$username${NC} not found on your VPS"
exit 0
fi
echo -e "Thank you! Please type "menu" to back."
	}

function lock_account() {
	
	echo -e "$uname account has been lock"
	usermod -L $uname
	echo -e "Thank you! Please type "menu" to back."
	}

function unlock_account() {
	
	echo -e "$uname account has been unlock"
	usermod -U $uname
	echo - "Thank you! Please type "menu" to back."
	}
	
function generate_trial() {
#IP=`dig +short myip.opendns.com @resolver1.opendns.com`
uname=trial`</dev/urandom tr -dc X-Z0-9 | head -c4`
hari="1"
pass=`</dev/urandom tr -dc a-f0-9 | head -c9`

useradd -e `date -d "$hari days" +"%Y-%m-%d"` -s /bin/false -M $uname
echo -e "$pass\n$pass\n"|passwd $uname &> /dev/null
echo -e ""
echo -e "====Trial account info.===="
echo -e "Username: $uname"
echo -e "Password: $pass\n"
echo -e "==========================="
echo -e ""
echo -e "Type (menu) to back."
echo -e ""
}
function renew_user() {
	
	echo "New expiration date for $uname: $expdate...";
	usermod -e $expdate $uname
	echo "Thank you! Please type "menu" to back."
}
function check_ssh_user(){

data=( `ps aux | grep -i dropbear | awk '{print $2}'`);

echo "-----------------------";
echo "Checking Dropbear login";
echo "-----------------------";

for PID in "${data[@]}"
do
	#echo "check $PID";
	NUM=`cat /var/log/auth.log | grep -i dropbear | grep -i "Password auth succeeded" | grep "dropbear\[$PID\]" | wc -l`;
	USER=`cat /var/log/auth.log | grep -i dropbear | grep -i "Password auth succeeded" | grep "dropbear\[$PID\]" | awk '{print $10}'`;
	IP=`cat /var/log/auth.log | grep -i dropbear | grep -i "Password auth succeeded" | grep "dropbear\[$PID\]" | awk '{print $12}'`;
	if [ $NUM -eq 1 ]; then
		echo "$PID - $USER - $IP";
	fi
done

echo "";

data=( `ps aux | grep "\[priv\]" | sort -k 72 | awk '{print $2}'`);

echo "----------------------";
echo "Checking OpenSSH login";
echo "----------------------";

for PID in "${data[@]}"
do
        #echo "check $PID";
	NUM=`cat /var/log/auth.log | grep -i sshd | grep -i "Accepted password for" | grep "sshd\[$PID\]" | wc -l`;
	USER=`cat /var/log/auth.log | grep -i sshd | grep -i "Accepted password for" | grep "sshd\[$PID\]" | awk '{print $9}'`;
	IP=`cat /var/log/auth.log | grep -i sshd | grep -i "Accepted password for" | grep "sshd\[$PID\]" | awk '{print $11}'`;
        if [ $NUM -eq 1 ]; then
                echo "$PID - $USER - $IP";
        fi
done

echo "";

echo "------------------------------------------------"
echo " Multi Login = Kill "
echo " Usurname : Kill number PID "
echo "------------------------------------------------"

echo "";
echo -e "Type [menu] to back MENU OPTION."
echo "Mod by jhelson15";

}
function delete_user(){
	userdel $uname
	
	echo "$uname Successfully Deleted"
	echo "Thank you! Please type "menu" to back."
}

function expired_users(){

	echo -e "Username Expired list:"
	cat /etc/shadow | cut -d: -f1,8 | sed /:$/d > /tmp/expirelist.txt
	totalaccounts=`cat /tmp/expirelist.txt | wc -l`
	for((i=1; i<=$totalaccounts; i++ )); do
		tuserval=`head -n $i /tmp/expirelist.txt | tail -n 1`
		username=`echo $tuserval | cut -f1 -d:`
		userexp=`echo $tuserval | cut -f2 -d:`
		userexpireinseconds=$(( $userexp * 86400 ))
		todaystime=`date +%s`
		if [ $userexpireinseconds -lt $todaystime ] ; then
			echo $username
		fi
	done
	rm /tmp/expirelist.txt
	
	echo ""
	echo "Thank you! Please type "menu" to back."
}

function not_expired_users(){
	echo -e "Username Not-Expired list:"
    cat /etc/shadow | cut -d: -f1,8 | sed /:$/d > /tmp/expirelist.txt
    totalaccounts=`cat /tmp/expirelist.txt | wc -l`
    for((i=1; i<=$totalaccounts; i++ )); do
        tuserval=`head -n $i /tmp/expirelist.txt | tail -n 1`
        username=`echo $tuserval | cut -f1 -d:`
        userexp=`echo $tuserval | cut -f2 -d:`
        userexpireinseconds=$(( $userexp * 86400 ))
        todaystime=`date +%s`
        if [ $userexpireinseconds -gt $todaystime ] ; then
            echo $username
        fi
    done
    	echo ""
	echo "Thank you! Please type "menu" to back."
	rm /tmp/expirelist.txt
		
}

function used_data(){
	echo -e ""
	echo -e "Total Data Usage:"

	myip=`ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0' | head -n1`
	myint=`ifconfig | grep -B1 "inet addr:$myip" | head -n1 | awk '{print $1}'`
	ifconfig $myint | grep "RX bytes" | sed -e 's/ *RX [a-z:0-9]*/Received: /g' | sed -e 's/TX [a-z:0-9]*/\nTransfered: /g'
	
	echo ""
	echo "Thank you! Please type "menu" to back."
}

clear
screenfetch
echo "--------------------------------------------"
echo "-----Welcom Jelson Barrozo Autoscript ------"
echo "[Menu]"
PS3='Please enter number your choice [1-19]: '
options=("Add OVPN account" 
	 "Shadowsock How to?"	
	 "Add SS account" 
	 "Restart SS" 
	 "Change password" 
	 "lock account" 
	 "unlock account" 
	 "Check ssh user list" 
	 "Generate_trial" 
	 "Renew User" 
	 "Delete User" 
	 "User List" 
  	 "Ram Status" 
	 "Speedtest" 
	 "Refresh Squid" 
	 "Users Not Expired"  
	 "Expired Users" 
	 "Used Data By Users" 
	 "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Add OVPN account")
            #read -p "Enter username: " uname
            #read -p "Enter Password for username[$uname]: " pass
            #read -p "Enter Date for username[$uname](YYYY:MM:DD): " expdate
	    
	    create_user
	    break
            ;;
	 "Shadowsock How to?")
echo -e ""
echo -e ""
clear
echo "Connecting to..."
sleep 0.5
echo "Change Password..."
sleep 0.5
echo -e "SHADOWSOCKS HOW TO?"
echo -e ""
                echo -e "Do not delete any text just edit password"

echo -e ""
echo -e "ITO ANG MGA IBIBIGAY MO SA CLIENT MO."
echo -e "[IP]                   [PASS]            [PORT]         [ENCRYPTION MODE]"
echo -e "[139.59.120.38]  [EDITMOTOPASWORD]     [9000-9015]     [AES-256-CFB,ORIGIN,PLAIN]"
echo -e ""
echo -e "1) WAG MO NA GALAWIN YANG MGA NAKIKITA MO SA JSON FOLDER "PASSWORD" LANG ANG EDIT MO WALA NG IBA."
echo -e ""
echo -e "2) PAG KATAPOS MO EDIT ANG PASSWORD CHECK MO YUNG KATAPAT NA PORT YUNG ANG KASAMANYA."
echo -e ""
echo -e "3) THEN GAWIN MO YUNG COMMAND "1" PARA MA-SAVE ANG GINAWA MO."
echo -e ""
echo -e "4) PARA MAKITA MO YUNG ILALIM PRESS MO LANG ARROW KEY TO MOVE UP-DOWN-LEFT-RIGHT"
echo -e ""
echo -e "5) YANG KULAY YELLOW GREEN ANG ARROW MO PARA MAKA PAG TYPE KA AT MA EDIT MO YUNG MGA TEXT."
echo -e ""
echo -e "6) PRESS DELETE TO REMOVE TEXT TAPAT MO YUNG ARROW KEY DOON SA TEXT NA EDIT MO."
echo -e ""
echo -e "7) PALITAN MO LANG YUNG PASSWORD QUOTED "editmoitopassword" dont remove the QUOTE."
echo -e ""
echo -e "8) PAG KA EXIT TYPE KA ULIT menu THEN PRESS 4 TO RESTART AND SHADOWSOCKS ACCOUNT WILL START CORRECTLY."
echo -e ""
echo -e "9) SA EXPIRATION MANUAL MO LISTA SA EXCEL OR NOTEPAD HINDI TO AUTOMATIC NA MERON EXPIRATION."

echo -e ""
echo -e "*************shadowsocksjson folder COMMAND**************"
echo -e  "MOVE ARROW KEY TO EDIT TEXT'S [UP-DOWN-LEFT-RIGHT]"
echo -e "Command 1 to exit [ctrl+x] then press "Y" end hit enter"
echo -e ""
echo -e "To Start Edit, Add, create Password of port in shadowsocks choose number 3. Add SS account at menu option." 
echo -e ""
echo "Thank you! Please type "menu" to back."
	    break
            ;;
	 "Add SS account")
            #read -p "Enter username: " uname
            #read -p "Enter Password for username[$uname]: " pass
            #read -p "Enter Date for username[$uname](YYYY:MM:DD): " expdate
	    
	    create_ss
	    break
            ;;
	   "Restart SS")
	    restart_ss
	    break
            ;;
        "Change password")
             /root/status
	    change_user_pass
	    break
            ;;
	"lock account")
	    /root/status
	    read -p "What username you want Lock ?: " uname
	    lock_account
	    break
            ;;
	"unlock account")
	    /root/status
	    read -p "What username you want unLock ?: " uname
            unlock_account
	    break
            ;;
        "Generate_trial")
	      generate_trial
	      break
	      ;;   
       "Renew User")
            read -p "Enter username to renew: " uname
            read -p "Enter expiry date (YYYY-MM-DD): " expdate
            renew_user
            break
            ;;
        "Delete User")
	    /root/status
            read -p "Enter username to be removed: " uname
            delete_user
            break
            ;;		
	"User List")
            /root/status
            break
	    ;;		
	"Check ssh user list")
           check_ssh_user
            break
            ;;	
	"Ram Status")
		    free -h | grep -v + > /tmp/ramcache
            cat /tmp/ramcache | grep -v "Swap"
            break
            ;;	
	"Users Not Expired")
			not_expired_users
			break
			;;
	"Speedtest")
			./speedtest
			break
			;;
	"Refresh Squid")
			./refresh
			break
			;;
	 "Expired Users")
			expired_users
			break
			;;
		"Used Data By Users")
			used_data
			break
			;;
					
        "Quit")
            break
            ;;
        *) echo invalid option;;
    esac
done
